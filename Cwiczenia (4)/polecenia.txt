1)match (a{name: "Darjeeling"}),(b {name: "Sandakphu"}),path = allShortestPaths((a)-[*]->(b))return path

2)match (a{name: "Darjeeling"}),(b {name: "Sandakphu"}),path = allShortestPaths((a)-[*]->(b))
where all (c in relationships(path) where c.winter = "true")return path

3)
  a)match path = ((a {name: "Darjeeling"})-[b*]->(c {name: "Sandakphu"}))
	unwind b as d with path, reduce(x=0, addSum in collect(d.distance) | x + addSum) as  distance
	order by distance desc return distinct path,distance
  b)match (a {name: "Darjeeling"}), (b {name: "Sandakphu"}), path = allShortestPaths((a)-[:twowheeler*]->(b))
	where all (c in relationships(path) where c.summer = "true")return path

4)match(a:Flight)-[:ORIGIN]->(b:Airport)with count(a) as c, b
order by count(a) desc return b, c





//============================================================================================================================
poniższe zapytania nie mają plików graficznych i JSON ponieważ baza danych zwróciła timeout. teoretycznie mogą być poprawne.
//============================================================================================================================
5)??? =-nie wiem. coś z zapytania rekurencyjnego, z unwind? coś z APOC? brutalna siła i union? (było by ich z 6)
//MODYFIKACJA BAZY DANYCH=====================================================================================================
match (a)<-[b:ORIGIN]-(c)-[d:DESTINATION]->(e),(c)<-[f]-(g)
return a,b,c,d,e,min(g.price)as price order by price desc

match (a)<-[b:ORIGIN]-(c)-[d:DESTINATION]->(e),(c)<-[f]-(g)
with *,min(g.price)as price
return a,b,c,d,e,price order by price

match (a)<-[b:ORIGIN]-(c)-[d:DESTINATION]->(e),(c)<-[f]-(g)
with *,min(g.price)as price
return a,b,c,d,e,price order by price
create (a)-[X:FLY{cost:price}]->(e)
return type(X), X.cost
//============================================================================================================================
6)match path = ((a {name: "LAX"})-[b:FLY*]->(c {name: "DAY"}))
unwind b as d with path, reduce(x=0, addSum in collect(d.cost) | x + addSum) as  totalCost
return distinct path,totalCost order by totalCost desc

7)match path = ((a {name: "LAX"})-[b:FLY*]->(c {name: "DAY"}))
unwind b as d with path, reduce(x=0, addSum in collect(d.cost) | x + addSum) as  totalCost
return distinct path,totalCost order by totalCost desc limit 1
//MODYFIKACJA BAZY DANYCH=====================================================================================================
MATCH()-[r:FLY]->()
DELETE r

match (a)<-[b:ORIGIN]-(c)-[d:DESTINATION]->(e),(c)<-[f]-(g{class:"business"})
with *,min(g.price)as price
return a,b,c,d,e,price order by price

match (a)<-[b:ORIGIN]-(c)-[d:DESTINATION]->(e),(c)<-[f]-(g{class:"business"})
with *,min(g.price)as price
create (a)-[X:FLY{cost:price}]->(e)
return type(X), X.cost
//============================================================================================================================
8)match path = ((a {name: "LAX"})-[b:FLY*]->(c {name: "DAY"}))
unwind b as d with path, reduce(x=0, addSum in collect(d.cost) | x + addSum) as  totalCost
return distinct path,totalCost order by totalCost desc limit 1
//MODYFIKACJA BAZY DANYCH=====================================================================================================
MATCH()-[r:FLY]->()
DELETE r
//============================================================================================================================
9)=-group by i unwind?

10)match path = ((a1)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(a2)<-[:ORIGIN]-(flight2:Flight)-[:DESTINATION]->(a3)) where a1<>a3
with path, reduce(sum = 0, part IN [x IN NODES(path) where "Flight" IN LABELS(x)] |
sum + [(part)<-[:ASSIGN]-(ticket {class: "economy"}) | ticket.price][0]) as totalCost 
return path,totalCost order by totalCost asc limit 1

//note: match (a{name: "LAX"}),(b {name: "DAY"}), path = allShortestPaths((a)-[fly:FLY*]->(b)) return path

